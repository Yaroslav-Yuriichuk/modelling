#pragma kernel Main

struct voxel
{
    int exists;
};

uint3 model_size;
uint3 chunk_size;
uint3 chunk_id;
float voxel_size;

RWStructuredBuffer<voxel> voxels;

int get_voxel_index_in_chunk(const uint3 id)
{
    if (id.x >= chunk_size.x || id.y >= chunk_size.y || id.z >= chunk_size.z)
    {
        return -1;
    }

    return id.z * chunk_size.x * chunk_size.y + id.y * chunk_size.x + id.x;
}

bool is_in_model(const uint3 id)
{
    bool is_valid = chunk_id.x * chunk_size.x + id.x < model_size.x;

    is_valid = is_valid && chunk_id.y * chunk_size.y + id.y < model_size.y;
    is_valid = is_valid && chunk_id.z * chunk_size.z + id.z < model_size.z;
    
    return is_valid;
}

[numthreads(10, 10, 10)]
void Main (uint3 id : SV_DispatchThreadID)
{
    const int index = get_voxel_index_in_chunk(id);

    if (index != -1 && is_in_model(id))
    {
        voxels[index].exists = 1;
    }
    else
    {
        voxels[index].exists = 0;
    }
}
