#pragma kernel Main

struct voxel
{
    int exists;
};

uint3 model_size;
uint3 chunk_size;
uint3 chunk_id;
float voxel_size;

RWStructuredBuffer<voxel> voxels;

float max(const float x, const float y, const float z)
{
    return max(x, max(y, z));
}

int get_voxel_index_in_chunk(const uint3 id)
{
    if (id.x >= chunk_size.x || id.y >= chunk_size.y || id.z >= chunk_size.z)
    {
        return -1;
    }

    return id.z * chunk_size.x * chunk_size.y + id.y * chunk_size.x + id.x;
}

bool is_in_model(const uint3 id)
{
    bool is_valid = chunk_id.x * chunk_size.x + id.x < model_size.x;

    is_valid = is_valid && chunk_id.y * chunk_size.y + id.y < model_size.y;
    is_valid = is_valid && chunk_id.z * chunk_size.z + id.z < model_size.z;
    
    return is_valid;
}

float squared_distance(float3 a, float3 b)
{
    return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z);
}

bool is_in_sphere(const uint3 id)
{
    const float3 offset = -voxel_size * model_size / 2 + voxel_size * chunk_size * chunk_id;
    
    const float sphere_radius = voxel_size * max(model_size.x, model_size.y, model_size.z) / 2.0;
    const float3 sphere_coordinates = float3(0, 0, 0);

    const float3 voxel_coordinates = float3(
        id.x * voxel_size + voxel_size / 2.0,
        id.y * voxel_size + voxel_size / 2.0,
        id.z * voxel_size + voxel_size / 2.0) + offset;

    return squared_distance(sphere_coordinates, voxel_coordinates) <= sphere_radius * sphere_radius;
}

[numthreads(10, 10, 10)]
void Main (uint3 id : SV_DispatchThreadID)
{
    const int index = get_voxel_index_in_chunk(id);
    
    if (index != -1)
    {
        if (is_in_sphere(id))
        {
            voxels[index].exists = 1;
        }
        else
        {
            voxels[index].exists = 0;
        }
    }
}
